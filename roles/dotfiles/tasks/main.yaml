---
- name: Decide yadm package name
  set_fact:
    yadm_package_name: >-
      {%- if ansible_facts['os_family'] == 'Archlinux' -%} yadm-git
      {%- else -%} yadm
      {%- endif -%}
  when: yadm_package_name == 'unset'

- name: Install yadm dependencies
  include_role:
    name: roles/install_package
  vars:
    packages: "{{ yadm_dependencies }}"
    install_latest: yes

- name: Install yadm debian-specific dependencies
  include_role:
    name: roles/install_package
  vars:
    packages: "{{ yadm_debian_dependencies }}"
    install_latest: yes
  when: ansible_os_family == 'Debian'

- name: Install yadm
  block:
  - name: Install yadm via package manager
    block:
    - name: Install yadm
      include_role:
        name: roles/install_package
      vars:
        packages:
        - "{{ yadm_package_name }}"
        install_latest: yes

    - name: Locate yadm executable
      set_fact:
        yadm_executable: yadm
    when: ansible_os_family != 'Debian'

  - name: Install yadm manually
    block:
    - name: Check if yadm already cloned
      stat:
        path: "{{ user_home }}/.yadm-project"
      register: yadm_repository

    - name: Clone yadm repository and link to ~/.local/bin
      shell: |
        git clone https://github.com/TheLocehiliosan/yadm.git {{ user_home }}/.yadm-project
        mkdir -p {{ user_home }}/.local/bin
        ln -sfnv {{ user_home }}/.yadm-project/yadm {{ user_home }}/.local/bin/yadm
        echo {{ user_home }}/.yadm-project/yadm
      when: not yadm_repository.stat.exists

    - name: Locate yadm executable
      set_fact:
        yadm_executable: "{{ user_home }}/.local/bin/yadm"

    when: ansible_os_family == 'Debian'
    become: no

- name: Show yadm executable path
  debug: var=yadm_executable

- name: Ensure dotfiles deployed
  block:
  - name: Check if dotfiles repository already exists
    shell:
      cmd: "{{ yadm_executable }} status"
    register: dotfiles_repository_exists
    changed_when: False
    failed_when: False
  - name: Show if dotfiles repository exists
    debug:
      msg: "Dotfiles repository {% if dotfiles_repository_exists.rc == 0 -%}exists.{%- else -%}does not exist.{%- endif -%}"

  - name: Clone dotfiles
    shell:
      cmd: "{{ yadm_executable }} clone --no-bootstrap {{ dotfiles_repository }}"
      chdir: "{{ user_home }}"
    when: dotfiles_repository_exists.rc != 0

  - name: Pull latest dotfiles if already deployed
    shell:
      cmd: "{{ yadm_executable }} pull"
      chdir: "{{ user_home }}"
    register: yadm_pull_result
    changed_when: "'Already up to date' not in yadm_pull_result.stdout"
    when: dotfiles_repository_exists.rc == 0
  become: no

# Since yadm's decrypt functionality doesn't play well with non-interactive environment
# We need to do gpg decryption manually
- name: Decrypt yadm files
  shell:
    chdir: "{{ user_home }}"
    cmd: |
      gpg --batch --passphrase-fd 0 -d {{ user_home }}/.local/share/yadm/archive | tar vxf - -C {{ user_home }} --no-same-owner
    stdin: "{{ lookup('file', 'assets/yadm_decrypt_key') }}"
  when: remote is undefined or not remote
  changed_when: False
  become: no
  no_log: yes

- name: Symlink alternative files/templates
  shell:
    cmd: "{{ yadm_executable }} alt"
    chdir: "{{ user_home }}"
  changed_when: False
  become: no
